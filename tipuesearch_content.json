{"pages":[{"title":"  404: Page not found\n | wradlib","text":"\n\n\n\n  404: Page not found\n | wradlib\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWRADLIB\n\n\nwradlib An Open Source Library for Weather Radar Data Processing\n\n\n\nwradlib\n\nHome\nDocumentation\nCommunity\nAbout\n\n\n\n\n\n\n\n\n\n\n\n\n404: Page not found\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nContact\n\n \n\n    wradlib\n  \n\n\n\nResources\n\n \n\n    Repository\n  \n \n    Documentation\n  \n \n    wradlib-user group\n  \n\n\n\nBrowse content by\n\n Categories\n Dates\n Tags\n\n\n\nCopyright notice\n© Copyright 2016 wradlib.\n\n\nDisclaimer\nAll opinions expressed in this site are own personal opinions of the respective wradlib developers and are not endorsed by, nor do they represent the opinions of their previous, current and future employers or any of its affiliates, partners or customers.\n\n\n Back to top\n\n\n\n\n\n          Site generated by  Pelican.\n Plumage theme by Kevin Deldycke.\n        \n\n\n\n\n\n\n\n\n\n","tags":"","url":"https://wradlib.org/404.html"},{"title":"404: Page not found","text":"","tags":"wradlib","url":"404-not-found/"},{"title":"410: Page is gone","text":"","tags":"wradlib","url":"410-gone/"},{"title":"500: Internal server error","text":"","tags":"wradlib","url":"500-error/"},{"title":"About","text":"Welcome The wradlib project has been initiated in order facilitate the use of weather radar data as well as to provide a common platform for research on new algorithms. wradlib is an open source library which is well documented and easy to use. It is written in the free programming language Python. Focus Weather radar data is potentially useful in meteorology, hydrology and risk management. Its ability to provide information on precipitation with high spatio-temporal resolution over large areas makes it an invaluable tool for short term weather forecasting or flash flood forecasting. Ambition wradlib is designed to assist you in the most important steps of processing weather radar data. These may include: reading common data formats, georeferencing, converting reflectivity to rainfall intensity, identifying and correcting typical error sources (such as clutter or attenuation) and visualising the data. Reference Please cite wradlib as Heistermann, M., Jacobi, S., and Pfaff, T.: Technical Note: An open source library for processing weather radar data (wradlib), Hydrol. Earth Syst. Sci., 17, 863-871, doi: 10.5194/hess-17-863-2013, 2013","tags":"wradlib","url":"about/"},{"title":"Community","text":"wradlib is a community effort For the further development of the wradlib project we need your help. Is there an algorithm you would consider useful? Please provide code (in any programming language) or documentation. We will it a try to integrate this algorithm in wradlib. However, there is an even better way, Fork us on github and implement your changes into your wradlib-fork. Test your code and start a pull-request. We will review your changes. On approval, we will merge your fork back into the main wradlib branch. Now everyone can benefit from your improvements. Feedback Your feedback will contribute to the future development of wradlib! To provide feedback, use the issues page and create an issue (bug reports, suggestions, …). Mailing-List We also encourage you to register to the wradlib-users mailing list . Using this mailing list or forum, you can ask other users and developers for help and help others, and we can notify you about the latest updates and developments.","tags":"wradlib","url":"community/"},{"title":"Documentation","text":"wradlib documentation The wradlib project is documented via sphinx using the sphinx-rtd-theme. It is available here . Within the documentation an extensive tutorial section covering many real world use cases is available. For developers there is a documentation of the API . Background literature used for developement of wradlib is also available","tags":"wradlib","url":"docs/"},{"title":"Downloads","text":"template: downloads","tags":"wradlib","url":"downloads/"},{"title":"wradlib moves forward","text":"As you probably all know by now, wradlib is moving forward now and in the near future. There are several aspects which are laid out in this blog post. Xradar In the upcoming version 1.19 wradlib will use xradar for reading/writing radar data. For this to happen, I've ported all related code from wradlib to xradar. Xradar, a package dedicated to read and write radar data based on xarray structures, was launched in late August 2022, on initiative of Max Grover and me. A compatibility layer is kept in wradlib which enables users to continue using their code and early adopt full xradar dependency. wradlib 2.0 After the above switch to xradar in wradlib 1.19 there will be quite some new code based on xarray data structures flowing into wradlib. We'll have to cut off some old braids, too. But, using the Scientific Python stack with all those great packages, like Xarray, Dask, matplotlib, Jupyter, NumPy, SciPy, to name only a few, wradlib is still standing on the shoulders of giants. wradlib-data The wradlib-data repository is on the move to use pooch for retrieving datasets. That way you only have to install shallow package and the data will be fetched from the repo on demand. wradlib-notebooks The wradlib-notebooks have been updated and restructured a bit to be in line with the latest developments. There is a bit of work ahead to get all notebooks up-to-date using recent technology. wradlib-docs The split of wradlib into three repos back in early 2016 was no easy decision. It helped a lot in gaining as much as possible from the emerging GitHub cloud system. Now, as GitHub has tremendously advanced - huge thanks to GitHub for providing this all for free for us open source projects - it has come the time to get the wradlib-docs back into the wradlib main repository. We can much more easily keep everything together without any loose ends. This will most likely happen just after wradlib 1.19 release. In the same time the docs will have a refresh as well. We will also see a new theme by then. wradlib-users forum We've seen any kind of questions and help in our forum over the years. I always appreciated the constructive and friendly discussions. Within the openradar community we've discussed how to get more close together with respect to help users and discuss any matters of weather radar and more. Our not so new openradar-discourse discussion-group is our new location where users, developers, scientists and other weather radar enthusiasts can come together. The wradlib-users forum will go out of service later this year. I hope to see you around - Stay well, Everyone!","tags":"news","url":"2023/02/wradlib_xradar/"},{"title":"Release 1.15","text":"We have now released version 1.15 of wradlib. This release only has one enhancement: New features add Furuno backend for reading radar data into xarray Datasets As all new enhancements and additions might introduce regressions, please report any issues you experience.","tags":"news","url":"2022/04/wradlib_release_1_15_0/"},{"title":"Release 1.14","text":"We have now released version 1.14 of wradlib. Now, these are the most important changes: New features zonalstats enhancements, new VectorSource class, geopandas connector and more For an example have a look here in the docs Maintenance - Code refactor deprecated xarray functionality use f-strings where appropriate remove unnecessary object-inheritance replace distutils.version.LooseVersion with packaging.version.Version use dict-literals Maintenance - Build/ CI cancel previous CV builds use provision-with-micromamba action Bugfixes remove zero padding of bits in rainbow format (truncate excess bits from flagmap) raise ValueError if projection cannot be determined from source dataset output full timeslice when calling to_netcdf with no timestep handle variable number of gates in CfRadial1 backend use radar site altitude in bin_altitude calculation take precision into account for RADOLAN WN product correct elevation for negative angles in iris/sigmet RAW data fix AttributeError: ‘str' object has no attribute ‘item' use start date/time if end date/time is missing for ODIM reader New Contributors * @binomaiheu made their first contribution in #550 We like to thank all our contributors and all community members who ask questions and provide feedback on the various channels. Your contributions are very much appreciated. For a complete list of changes refer to the full Changelog 1.13.0…1.14.0 or the release notes . As all new enhancements and additions might introduce regressions, please report any issues you experience.","tags":"news","url":"2022/03/wradlib_release_1_14_0/"},{"title":"Release 1.13","text":"We have now released version 1.13 of wradlib. After missing requirements_optional.txt in the source distribution which has been uploaded to PyPI as 1.12.0 , we had to remove this version from PyPI again. The problem was that the installation from the source distribution was not possible without this file. Anyway, this was fixed and wradlib 1.13.0 was released shortly after. This version contains two enhancements and a whole bunch of bugfixes. Some dependencies have been made optional as well. The hard dependencies of wradlib are codewise: deprecation matplotlib numpy scipy xarray>=0.17.0 This has no affect on current versions < 2.0 doing normal install or by installing via conda-forge. But you can already test this by installing wradlib using pip: $ python -m pip install wradlib == 1 .13.0 --no-deps Or from inside the latest cloned/extracted wradlib github-main: $ python -m pip install . --no-deps Now, these are the most important changes: New features add IRIS /sigmet backend for reading radar data into xarray Datasets add Rainbow5 backend for reading radar data into xarray Datasets Maintenance optionalize dependencies (dask, gdal, h5netcdf, h5py, netCDF4, requests, xmltodict) use pytest-doctestplus to handle optional dependencies in doctests fix docstrings Bugfixes use reasonable default values in io.xarray.to_odim (gain, offset, nodata, undetect, fillvalue) add cf attributes when reading GAMIC files fix regression in legacy GAMIC reader catch dt.accessor TypeError fix thread-lock issue, if dask is not installed use int instead np.int in radolan header parser fix several tests We like to thank all our contributors and all community members who ask questions and provide feedback on the various channels. Your contributions are very much appreciated. For a complete list of changes refer to the full Changelog 1.11.0…1.13.0 or the release notes . As all new enhancements and additions might introduce regressions, please report any issues you experience.","tags":"news","url":"2021/11/wradlib_release_1_13_0/"},{"title":"Release 1.11","text":"We have now released version 1.11 of wradlib. This version contains two enhancements and a whole bunch of bugfixes. We changed our branch naming to main . Now, these are the most important changes: New features add support for RADOLAN HG product add %M, %J and %Y RADOLAN products Maintenance rename master -> main fix docstrings (links, types, minor issues) Bugfixes minor fixes in GAMIC and CfRadial readers use default values for ODIM / OPERA what-group do not restrict variables, but read all variables for Cf/Radial1 data correct calculation of angle resolution in ODIM / GAMIC xarray readers add mode-kwarg to radolan coordinates/grid functions add kwarg origin and FutureWarning to IRIS CartesianImage reader remove unnecessary gridshape kwarg from docstring in CartesianVolume correctly handle single/multiple elevations in wradlib.vis.plot_scan_strategy fix ODIM xarray reader issues mention dask in all open_*_mfdataset functions We like to thank all our contributors and all community members who ask questions and provide feedback on the various channels. Your contributions are very much appreciated. For a complete list of changes refer to the wradlib repository or the release notes . As all new enhancements and additions might introduce regressions, please report any issues you experience.","tags":"news","url":"2021/09/wradlib_release_1_11_0/"},{"title":"Release 1.10","text":"We have now released version 1.10 of wradlib. This version contains several enhancements and some bugfixes. For our Continuous Integration we've moved to GitHub Actions for all of our production repositories. Now, these are the most important changes: New features add ODIM / GAMIC /CfRadial/ RADOLAN backends for reading radar data into xarray Datasets decode IRIS DB_XHDR as numpy structured array Maintenance use GitHub Actions as CI use new xarray.BackendEntryPoint address several DeprecationWarnings (eg. numpy) create/use earthdata credentials for srtm data (users would need to do so, if the want to use srtm data) Bugfixes fix _FillValue and GAMIC dynamic range fix doctest example in vpr-module fix handle kwarg change scipy.cKDTree We like to thank all our contributors and all community members who ask questions and provide feedback on the various channels. Your contributions are very much appreciated. For a complete list of changes refer to the wradlib repository . As all new enhancements and additions might introduce regressions, please report any issues you experience.","tags":"news","url":"2021/06/wradlib_release_1_10_0/"},{"title":"Release 1.9","text":"We have now released version 1.9 of wradlib. This version contains several bugfixes and some enhancements. For our Continuous Integration we've moved to micromamba which speeds up creation of Python environments. Now, these are the most important changes: New features make wradlib.io capable of consuming file-like objects read truncated RADOLAN composites Maintenance use micromamba on CI to save CI time add Python 3.9 builds to all CI Bugfixes add capability to decode old DX header simplify dimension angle handling ODIM / GAMIC adapt to new string handling in h5py >= 3.0 We like to thank all our contributors and all community members who ask questions and provide feedback on the various channels. Your contributions are very much appreciated. For a complete list of changes refer to the wradlib repository . As all new enhancements and additions might introduce regressions, please report any issues you experience.","tags":"news","url":"2020/11/wradlib_release_1_9_0/"},{"title":"Release 1.8","text":"We have now released version 1.8 of wradlib. This version contains several bugfixes and enhancements. We've also done a lot of maintenance with regard to Continuous Integration as well as handled upstream deprecations. Now, these are the most important changes: New features add WN product size (1200,1000) to radolan grid, add test for correct reference point (lower left) add WN and YW products to radolan to xarray converter add wradlib.show_versions() to easily get state of wradlib and it's dependencies (thanks to xarray ) Maintenance add azure CI tests code formatting according to black/isort/flake8, add setup.cfg add github templates remove deprecated and unused code and handle upstream deprecations use pytest for testing, implement \"@require_data\" to be able to run tests in case of missing wradlib-data enhance azure ci workflow by adding flake8 linter and uploading coverage Bugfixes fix srtm downloads windows path issues and region selection make georeference_dataset work with ND datasets update vis.plot_scan_strategy() add switch to keep elevation data unaltered ( DWD terrain following scan) always translate ODIM attributes to CF attributes specify keys (sweep_groups) which should be saved using to_netcdf rework ODIM RHI elevation angle retrieval We like to thank all our contributors and all community members who ask questions and provide feedback on the various channels. Your contributions are very much appreciated. For a complete list of changes refer to the wradlib repository . As all new enhancements and additions might introduce regressions, please report any issues you experience.","tags":"news","url":"2020/09/wradlib_release_1_8_0/"},{"title":"Release 1.7","text":"We have now released version 1.7 of wradlib. This version contains several bugfixes and enhancements. Now, these are the most important changes: Improvements in georef.projection module Edouard Goudenhoofdt ( RMI - Belgium) enhanced the projection-module with new functions to create radar centric and default earth projections. Implementation of interpolation functions working on regular grids In another example of joining forces of Edouard Goudenhoofdt ( RMI - Belgium) and Kai Mühlbauer (University Bonn - Germany) new interpolators working on regular grids have been implemented. This will be the first serve of a general overhaul of the interpolation classes. Rework of PhiDP/ KDP algorithm (Vulpiani et.al.) Kai Mühlbauer (University Bonn - Germany) added a new generalized derive function for calculation of derivation which significantly improves NaN-handling and speed. All other parts of the Vulpiani algorithm have been revised in terms of speed, handling of ND -arrays and parametrization. Implement decoding of DB_RAINRATE2 in IRIS /Sigmet reader Alper Çubuk ( TSMS - Turkey) added decoding of RAINRATE2 Bugfixes The wradlib community found several bugs which are now fixed. We like to thank all our contributors and all community members who ask questions and provide feedback on the various channels. Your contributions are very much appreciated. For a complete list of changes refer to the wradlib repository . As all new enhancements and additions might introduce regressions please report any issues you experience.","tags":"news","url":"2020/06/wradlib_release_1_7_0/"},{"title":"Release 1.6","text":"We have now released version 1.6 of wradlib. This version contains several bugfixes and enhancements. Now, these are the most important changes: Implementation of multi file ODIMH5 reader/writer In a combined effort of Edouard Goudenhoofdt ( RMI - Belgium) and Kai Mühlbauer (University Bonn - Germany) a new implementation of a multi-file ODIMH5 -reader has been added. The main difference to the other implementation is the ability to handle a timeseries of ODIMH5 data. Another great advantage lies in the implementation itself, where retrieving of metadata is achieved by using h5py , h5netcdf or netcdf depending on the users needs, which accounts for speed. The reading of datasets itself is decoupled from the metadata using xarray. Please find the implementation details included with a usage example in this comprehensive notebook . Improvements in georef.raster module Edouard Goudenhoofdt ( RMI - Belgium) enhanced the raster-module with the ability to automatically retrieve and project SRTM elevation data. Improve and simplify zr.module Kai Mühlbauer (University Bonn - Germany) took the chance to strip the zr-module from old code and made the functions work with multidimensional input data. Bugfixes The wradlib community found several bugs which are now fixed. We like to thank all our contributors and all community members who ask questions and provide feedback on the various channels. Your contributions are very much appreciated. For a complete list of changes refer to the wradlib repository . As all new enhancements and additions might introduce regressions please report any issues you experience.","tags":"news","url":"2020/03/wradlib_release_1_6_0/"},{"title":"Release 1.5","text":"We have now released version 1.5 of wradlib. This version contains several bugfixes and enhancements. Now, these are the most important changes: further consolidation of xarray based ODIM_H5 and Cf/Radial readers/writers We have added examples of how to read/write these files and also a real-live example using data from German Weather Service. In this example we show how our implementation combines all 20 files (two moments, 10 sweeps) into one xarray powered structure, which can be exported to single CfRadial2 or ODIM_H5 volume files. For exploitung dask for lazy/parallelized processing the chunk keyword can be used to transparently use dask with xarray. We encourage all users to dive into Xarray based processing as wradlib will continuously update it's codebase utilizing Xarray based processing. xarray wrapper for RADOLAN data As a first attempt we added loaddata='xarray' keyword argument to the read_radolan_composit function. This will output the data wrapped in an Xarray Dataset with attached coordinates of the radolan stereographic projection. A short example can be found here . speedup zonal statistics Using GDAL powered /vsimem (a virtual memory driver) and by creation of spatial and attribute index files as well as by combining attribute and property reads, we could significantly improve performance. The CI time of the zonal stats example went down to 80 seconds from over 360 seconds. Bugfixes The wradlib community found several bugs which are now fixed (multidimensional calling in gradient_along_axis , missing destination projection in destination dataset in reproject_raster_dataset and several more). We like to thank all our contributors and all community members who ask questions and provide feedback on the various channels. Your contributions very much appreciated. For a complete list of changes refer to the wradlib repository . As all new enhancements and additions might introduce regressions please report any issues you experience.","tags":"news","url":"2019/08/wradlib_release_1_5_0/"},{"title":"Release 1.4","text":"We have now released version 1.4 of wradlib. This version contains several bugfixes and three enhancements. Now, these are the most important changes: enhance/rewrite fuzzy echo classifier Aart Overeem ( KNMI ) not only spotted a long existing bug in dp.texture but also extended the clutter.classify_echo_fuzzy using DR (depolarization ratio, new function dp.depolarization ) and CPA (clutter phase alignment). read sigmet/iris ingest files, redesign reader This addition was suggested by Alex Schueth (Texas Tech Univ.). He provided ingest data files and tested the implementation. Feedback from Canberk Karadavut and Alper Çubuk ( TSMS ) was incorporated into the redesign of the reader. parametrized ODIM_H5 reader based on xarray This was suggested by Edouard Goudenhoofdt ( RMI ) to speed up loading time of ODIM_H5 data files. He provided initial implementation, which led to a minor re-write of the reader. Finally the implementation is flexible and powerful at the same time. The user can decide by keywords, which and how the data should be read. He also added a neat function to profile wradlib tests. Bugfixes Paul Pazdersik suggested the removal of an unnecessary seek in radolan-reader. Canberk Karadavut and Alper Çubuk found a problem in decoding of DB_FLIQUID2 in sigmet/iris-reader and added a fix. Bahtiyor Zohidov spotted a problem with the 2D HMC non-precip handling and helped with fixing. Sebastian Ernst and Zach Sherman helped to keep wradlib future-proof. We like to thank all our contributors and all community members who ask questions and provide feedback on the various channels. Your contributions very much appreciated. For a complete list of changes refer to the wradlib repository . As all new enhancements and additions might introduce regressions please report any issues you experience.","tags":"news","url":"2019/05/wradlib_release_1_4_0/"},{"title":"Release 1.3","text":"We have now released version 1.3 of wradlib. This version contains more improvements and enhancements than bugfixes. Now, these are the most important changes: Python3 only With version 1.3 we dropped support for Python 2.7. The package is intensively tested with Python 3.6 and 3.7. New CfRadial/ODIM_H5 reader based on xarray Contains functions to read and write CfRadial1 and upcoming CfRadial2 standard as well as ODIM_H5 standard radar data files. Makes intensive use of xarray package , see also our blog-post here . Examples are available in the wradlib documentation xarray powered plotting The plotting routines have been completely revised and build upon wradlib xarray DataArray Accessor. Helper functions for DataArray creation are implemented as well. Extensive tutorials including map-making using cartopy are available too. Revised Documentation The documentation structure has been reordered for better user experience. For a complete list of changes refer to the wradlib repository . As all new enhancements and additions might introduce regressions please report any issues you experience. Bugfix releases will be rolled out shortly. We kept our commitment to semver to stay backwards compatible regarding current workflows. One thing though is abandoning Python 2.7 where we are in line with many major python packages (eg. matplotlib).","tags":"news","url":"2019/03/wradlib_release_1_3_0/"},{"title":"Utilizing xarray for CfRadial - ODIM_H5 interoperability","text":"We have just added a new feature for CfRadial2 - ODIM_H5 interoperability to wradlib. wradlib is now able to read data from netcdf-based CfRadial1, CfRadial2 and hdf5-based ODIM_H5 (and other hdf5-flavours ( GAMIC )). wradlib is able to write data to CfRadial2 and ODIM_H5 files. This reader implementation uses netcdf4 h5py and xarray The data is claimed using netcdf4-Dataset in a diskless non-persistent mode: :::python ncf = nc.Dataset(filename, diskless=True, persist=False) Further the different netcdf/hdf groups are accessed via xarray opendataset and the NetCDF4DataStore: :::python xr.open_dataset(xr.backends.NetCDF4DataStore(ncf), mask_and_scale=True) For hdf5 data scaling/masking properties will be added to the datasets before decoding. For GAMIC compound data will be read via h5py. The data structure holds one root xarray dataset which corresponds to the CfRadial2 root-group and one or many sweep_X xarray datasets, holding the sweep data. Since for data handling xarray is utilized all xarray features can be exploited, like lazy-loading , pandas-like indexing on N-dimensional data and vectorized mathematical operations across multiple dimensions. Using cartopy and/or dask the possibilities seem endless. The writer implementation uses xarray for CfRadial2 output and relies on h5py for the ODIM_H5 output. One word of warning, this implementation is considered experimental. Changes in the API should be expected. We welcome everybody to check it out and report back any bugs, feature requests or other comments.","tags":"news","url":"2019/02/xarray_cfradial2_odimh5/"},{"title":"Release 1.2","text":"We have now released version 1.2 of wradlib. This version contains many bugfixes as well as improvements and enhancements. Most additions were pulled in within Hacktoberfest , the month-long celebration of open source software. Although this years Hacktoberfest is over, we encourage every wradlib user to join the party and envision the Hacktoberfest's 3 main mottos: Everyone is welcome! Quantity is fun, Quality is key Short term action, long term impact wradlib is building upon your support as users, feature requesters, bug reporters, collaborators and contributors. Thank you all, you're more than welcome. Now, these are the most important changes: New classify -module Contains Hydrometeorclassification ( HMC ) using 2D membershipfunctions. For incorporation of temperature data to HMC get_radiosonde function was added to io.misc . An example notebook covering the HMC workflow was added to the documentation (wradlib-notebooks). Other classification functions (clutter etc.) will be moved from clutter -module to classify in the next major version 2.0. Speed-up interpolation functions By using special keyword argument balanced_tree = False for SciPy's cKDTree implementation the ipol-functions could be accelerated quite substantially (factor 100). Introduced new header tokens for RADOLAN products German weather service ( DWD ) introduced new products using new header tokens ( VR , U ). The reader functions were enabled to work with these new products. Revised documentation structure and CI workflows The documentation has been revised in terms of conformance and consistency, links were updated, typos fixed and CI workflow improved. For a complete list of changes refer to the wradlib repository .","tags":"news","url":"2018/10/wradlib_release_1_2_0/"},{"title":"Release 1.0.0","text":"We have now released version 1.0.0 of wradlib. As some of you might be aware, version 1.x is generally considered as a major milestone, indicating that the software has all major features, and is considered reliable enough for general release. The first commit to wradlib is now almost seven years ago. During these years, a lot of changes have been introduced in terms of algorithms, but also in terms of documentation and maintenance workflows. Yet, the API has become more and more stable, so we decided that wradlib is now mature enough for switching to a 1.x development line. At the same time, we wanted to use that opportunity to address a couple of issues that we considered important from a developer's perspective. Addressing those issues will most likely break existing code and workflows. Yet, this is the time to do it, and doing it is vital to guarantee sustainable, efficient and reliable code development in the future. We cordially invite you to come along with us, and make use of version 1.0.0, even if it means that you might have to refactor your code. If you want to benefit from future improvements, this is the way to go! Limited resources will not allow us to further support the 0.x development line - from today on, it'll be legacy. So, these are the most important changes: Removing redundant and outdated code A lot of functions had been accumulating over time which remained immature, redundant, or scarcely used. Those functions and (partly) modules have been entirely removed. If you really miss one of them, raise an issue . Conform with PEP conventions Lots of function, class and variable names have been renamed in order to conform with PEP conventions . It might hurt, first, but we are confident that refactoring will be quick. Revise georeferencing Georeferencing has become more precise and transparent, making more use of gdal's potential. You will most likely not feel the difference - but we like it! Revise repository structure and CI workflows In order to make developing and releasing more efficient, we fundamentally revised the repository structure: - the actual wradlib code remains under http://github.com/wradlib/wradlib - the notebooks have been moved to https://github.com/wradlib/wradlib-notebooks Documentation pages The doc pages will mostly look the same, but they are now available under http://docs.wradlib.org . For all developers The pre-1.0 repository state is kept under https://github.com/wradlib/wradlib-old (not recommended). If you want to keep up with the latest developments, just stick with https://github.com/wradlib/wradlib. There's a small catch, though: if you want to base your development on the new wradlib/main, you need to merge it with brute force. On the local version of your current fork, you need to $ git remote add upstream https://github.com/wradlib/wradlib.git $ git checkout main $ git fetch upstream $ git reset --hard upstream/main $ git push origin main --force","tags":"news","url":"2018/04/wradlib_release_1_0_0/"},{"title":"Release 0.11.0","text":"We are happy to announce the release of wradlib 0.11.0. It introduces our first shot at reading IRIS (Sigmet) data - a feature that has been requested by quite a number users. Learn more about io.read_iris, and see it at work here . We are looking forward to your feedback! In addition, we redesigned the io and georef modules. As a user, you will hopefully not notice. As a developer, you will hopefully welcome a higher level of (sub-)modularization. For more details on the new release, please visit our release notes .","tags":"news","url":"2017/11/wradlib_release_0_11_0/"},{"title":"Introducing wradlib Cheat-Sheets","text":"Today we are glad to announce the start of a series of Cheat-Sheets covering all aspects of wradlib. The first Cheat-Sheet is Wradlib Getting Started which is available via the new Downloads-Section . Cheat-Sheets are very well established not only within the Python-Community. Who of us has not used the GitHub Git Cheat Sheet or the CONDA Cheat Sheet to get git and conda running? Often it is vital to have the most needed commands and code snippets at hand. We think the wradlib Cheat-Sheets will help first time users as well as advanced users to get important information on a single sheet of paper. We are looking forward to hear your opinions especially about what the wradlib users consider most wanted as topic for the second Cheat-Sheet . Please get in touch with us via email , the mailing-list or in Gitter-Chat .","tags":"wradlib","url":"2017/09/introducing-wradlib-cheat-sheets/"},{"title":"Release 0.10.1","text":"We are happy to announce the release of wradlib 0.10.1. This release is mainly a bug-fix release to make wradlib work with the latest numpy release 1.13. For more details on the new release, please visit our release notes .","tags":"news","url":"2017/06/wradlib_release_0_10_1/"},{"title":"Release 0.10.0","text":"We are happy to announce the release of wradlib 0.10.0. Highlights Highlight of this release is the implementation of matching of GPM / TRMM -platforms with ground radar observations in 3D. A step-by-step guide is available as jupyter notebook . Also the wradlib raster handling has been improved considerably with PR #137 . Further changes in wradlib 0.10.0 There are also a couple of community enhancements and other improvements and fixes. Community Contribution by Christian Chwala : wradlib.io.read_RADOLAN_composite accept file handles PR #114 , wradlib.io.read_Rainbow accept file handles PR #140 . Community Contribution by franklinvv : wradlib.georef.get_radolan_grid was enhanced to read extended- RADOLAN -grid PR #119 . Improvements: Merged the curvelinear grid plotting functions into the normal plotting functions. Added contour and filled contour plotting capabilities. Generic netcdf reader can read groups now. Added wradlib.qual.cum_beam_block_frac to compute cumulative beam blockage. Added Earth Curvature Display to beam blockage notebook Enhance wradlib.georef.read_gdal_values to read multiband data. Fixes: The build process on Travis- CI was significantly improved by running test-suites in dedicated threads/subprocesses. We also fixed some documentation inconsistencies. Several bugs were fixed in wradlib.qual.pulse_volume , wradlib.georef.transform_geometry , wradlib.util.find_bbox_indices and wradlib.ipol.cart2irregular_spline . Several other minor fixes. For more details on the new release, please visit our release notes .","tags":"news","url":"2017/04/wradlib_release_0_10_0/"},{"title":"Release 0.9.0","text":"With this post, we announce the release of wradlib 0.9.0. It finalizes our transition from example Python scripts to jupyter notebooks (as already announced in a previous post ). As a result, the documentation pages have become more consistent, and the handling of examples and tutorials more convenient and interactive. We hope you'll agree! Interactive examples with jupyter notebooks As a consequence, the previous doc sections \"Tutorials\" and \"Recipes\" have been replaced by one single section Tutorials and Examples . The pages in that section were automatically built from jupyter (IPython) notebooks. These notebooks are distributed with the new release , and you can use them to interactively browse through our tutorials and examples. You can always download the latest notebooks from the wradlib repository . For those who do not know, yet, how to handle jupyter notebooks, we prepared a quick tutorial . We also added a brief (and certainly incomplete) intro to Python for those who would like to have some entry point to that language. This intro will certainly be further developed in the future. In case you don't want to use notebooks: straight Python scripts are distributed alongside the notebooks with each new release >= 0.9.0 . Get the example data from the new wradlib data repository We moved all the example data from the main wradlib repository to a new data repository . In order to run the notebooks on your computer, you need to download the example data archive yourself, and extract it to any directory on your computer. Then you need to create an environment variable pointing to that directory. After that, the example notebooks will automagically pull the required example data from that directory. See here for more detailed guidance on the process. Further changes in wradlib 0.9.0 Along with wradlib 0.9.0, we also released a couple of minor, though hopefully useful new features and fixes, e.g.: wradlib.io.read_RADOLAN_composite can now read the new radolan FZ product , wradlib.io.readDX can now read gzipped DX data, wradlib.io.read_Rainbow was enhanced to read product pixmap data from rainbow5 files, fixed incompatibility issue with scipy 0.18.0 , and fixed some other issues. For more details on the new release, please visit our release notes . Updating to wradlib 0.9.0 Do you want to safely check out the new version and still keep the old one? Then you can install wraldib 0.9.0 into a new conda environment, e.g. like this: $ conda config --add channels conda-forge $ conda create --name wradlib090 python = 2 .7 $ activate wradlib090 $ conda install wradlib You can drop the first line if you already added the conda-forge channel. For more details, or if you do not use Anaconda or conda, see our installation instructions . In case you lost track of your Anaconda environments, you can use $ conda --info envs in order to get an overview. You can list all the packages (and their versions) in an environment (let's say wradlib090) via $ conda list --name wradlib090 For developers Untagged MICRO -releases (0.9.1 and so on) are now released on testpypi . In the future, we hope to adopt this for conda-forge , too. This might be interesting for users, too, for early checking of bug fixes (in case they do not want to use the bleeding edge code).","tags":"news","url":"2016/08/wradlib_release_0_9_0/"},{"title":"introducing wradlib jupyter notebooks","text":"At a wradlib code-sprint early April, we thought about ways to make wradlib examples and tutorials more user-friendly, interactive and consistent. Therefore, we decided to harmonise online tutorials and recipes together with the examples from the source distribution. All of them will be transformed as ready-to-use jupyter notebooks. These notebooks will be distributed along with wradlib, but they will also be rendered as tutorials/examples in the online documentation. In this ongoing process, all examples and tutorials will be reviewed and restructured if needed. As a result, wradlib users will be able to walk through the examples interactively by using jupyter together with IPython . Interactively means that users can manipulate code and parameters on the fly and immediately evaluate the result. This is perfect for courses, lectures or tutorials. It will help users to better understand wradlib (as compared to just executing a script). Still, for users who just want to run examples as plain Python scripts, we will also include these in the source distribution. Finally, all notebooks will be rendered for the online documentation. For getting an idea about jupyter notebooks within wradlib have a look at these three (rendered) notebooks: RADOLAN - Radar Products from German Weather Service , Beam Blockage Calculation using DEM and Plot Additional Data We are currently in the process of transition. Successively, we will migrate all tutorials and examples. Along the way, we decided to host our example datasets in the dedicated repository wradlib-data . This way, we remove the \"data overhead\" from the source distribution. In order to run the examples locally, users need to carry out two steps: download the data to a local directory, and point to this directory by creating an environment variable WRADLIB_DATA . The example data is automagically pulled from this location and used in the examples and notebooks. Detailed instructions will be included in the documentation. From a wradlib developers' perspective, the advantages of the new approach are huge, too: We only write a notebook once . This notebook will serve as both as test code and user example, and it will automatically be rendered for online documentation. This way, all code examples will be consistent and in sync. The new wradlib notebook workflow in more detail: document code example or tutorial only once as jupyter notebook convert notebooks for wradlib tests in CI ( convert_notebooks.sh ) render notebooks for wradlib docs in CI ( render_notebooks.sh , nbsphinx ) If you have ideas and suggestions about extending the tutorials, notebooks or recipe sections, take your chance and contact us.","tags":"wradlib","url":"2016/04/introducing-wradlib-jupyter-notebooks/"},{"title":"easy install using conda-forge","text":"With the help of an outstanding community effort named conda-forge , wradlib can now be more conveniently installed on linux , windows and osx . Until now, installing wradlib and its dependencies could be tricky, with each OS having its own issues. On Windows, we so far recommended to satisfy all depencies via Python(x,y) . This was convenient; however, it limited users to Python 2.7, and, more importantly, to 32-bit Python. This was a serious drawback particularly for memory-intensive applications. With this post, we present a new installation approach that is harmonised across platforms. Using conda-forge/wradlib-feedstock , we provide installable wradlib packages for all major OS (accounting for different python and numpy versions, and offering 32-bit builts for Windows, if desired). All builts are tested and uploaded to the conda-forge channel . The default-conda channel provides many wradlib dependencies out of the box, but not all. Hence, we also contributed to the conda-forge/gdal-feedstock making it the first feedstock serving two different package versions (gdal 1.11.4 and 2.0.2). As a result, wradlib can now be conveniently installed using the conda package manager . Windows users should be aware, though, that this approach is not compatible with Python(x,y). So you need to make a decision. So this is the basic walk through: Install the Anaconda environment of your choice Clone the root environment or create one from scratch $ conda create --name wradlib --clone root or $ conda create --name wradlib python = 2 .7 Add the conda-forge channel $ conda config --add channels conda-forge Activate wradlib environment Linux $ source activate wradlib Windows > activate wradlib Install wradlib (and dependencies) ( wradlib ) $ conda install wradlib Set GDAL_DATA environment variable (needed for georeferencing) Linux/ OSX bash ( wradlib ) $ export GDAL_DATA = /path/to/anaconda/envs/wradlib/share/gdal Windows CMD .exe [ wradlib ] > setx GDAL_DATA C: \\p ath \\t o \\a naconda \\e nvs \\w radlib \\L ibrary \\s hare \\g dal Optional dependencies can be installed OS independent with pip ( wradlib ) $ pip install xmltodict We hope that this new approach will make the installation of wradlib more convenient, and, as a result, enhance its usability on all major platforms - thanks to Anaconda from Continuum(R) and the conda-forge community effort.","tags":"wradlib","url":"2016/03/easy-install-using-conda-forge/"},{"title":"Simple Treeview with traits","text":"Since we are continuously receiving inquiries regarding the work with Rainbow5( TM ) radar data, I will present here a nice way of visualizing the dictionary representation of an arbitrary Rainbow5 file. This code snippet makes use of the python packages traits and traitsui. Installing traits is as easy as: $ pip install traitsui By adapting this gist a treeview representation of the loaded dictionary is given in a simple qt-gui: Now you can browse the contents of your versatile Rainbow5 data file and examine the needed dictionary-keys to fit in your data loading routine. Credits: Thorsten Kranz View at StackOverflow","tags":"prog","url":"2016/03/treeview-with-traits/"},{"title":"Release 0.8.0","text":"As already announced in previous articles ( #1 , #2 ), we entirely moved our code development from bitbucket to github , and applied a major code revision to make wradlib compatible with both Python 2.7 and 3.5. The tremendous efforts to achieve this have been spearheaded by Kai Muehlbauer (University of Bonn). Thanks also to Jonathan J. Helmus from Argonne National Laboratory for valuable advice in the transition period. Please understand that the bitbucket repository will no longer be updated, and only hosted as legacy code. wradlib 0.8.0 is the first release that follows upon this major transition. As a user, you should (hopefully) not feel much of a difference. The most obvious change is that you will now find the library documentation on http://wradlib.org/wradlib-docs . http://wradlib.org itself will serve as a new central service to keep you updated on new developments. You can keep on installing new wradlib releases with the pip install mechanism. Cloning the bleeding edge code will require to install a git client and point it to https://github.com/wradlib/wradlib . Developers are cordially invited to fork from that repository and share their developments via Pull Requests. Apart from these changes, wradlib 0.8.0 includes a couple of improvements particularly related to the zonalstats module . Please expect further changes to that module in the future, making it more generic and more convenient. We are now using Travis CI to continuously scrutinize the integrity of our codebase. Still, the transition might imply a couple issues that we have not yet identified. Please bear with us, and do not hesitate to report issues here , or to seek help in our user forum .","tags":"news","url":"2016/03/wradlib_release_0_8_0/"},{"title":"wradlib goes toward python3","text":"With Pull Request #5 we made the first step to have wradlib support Python3. All tests are running fine now, so we consider this a straight conversion. Nevertheless, there is an open issue which gets hold of remaining conversion problems. If you find a bug or issue, please report it there.","tags":"news","url":"2016/02/wradlib-python3-compatibility/"},{"title":"wradlib moves to github.com","text":"After over a year of reflection and thoughts, we finally decided to move from bitbucket to github . This means also to switch the versioning system from mercurial to git . The repository was transferred to git via hg-git. Thus, the commit history is available right from the beginning. The wradlib repo at bitbucket will be left available for reference. The first step on github was setting up continuous integration, which works fine with Travis- CI . Within this process the wradlib docs are made available at wradlib-docs . The whole process is not yet finished, so stay tuned .","tags":"news","url":"2016/02/wradlib-at-github/"}]}